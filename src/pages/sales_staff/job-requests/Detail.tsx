import { useEffect, useState } from "react";
import { useParams, useNavigate, Link } from "react-router-dom";
import Sidebar from "../../../components/common/Sidebar";
import { sidebarItems } from "../../../components/sales_staff/SidebarItems";
import { jobRequestService } from "../../../services/JobRequest";
import { clientCompanyService, type ClientCompany } from "../../../services/ClientCompany";
import { projectService, type Project } from "../../../services/Project";
import { jobPositionService, type JobPosition } from "../../../services/JobPosition";
import { skillService, type Skill } from "../../../services/Skill";
import { Button } from "../../../components/ui/button";
import { jobSkillService, type JobSkill } from "../../../services/JobSkill";
import { clientCompanyCVTemplateService } from "../../../services/ClientCompanyTemplate";

interface JobRequestDetail {
  id: number;
  title: string;
  projectName?: string;
  clientCompanyName?: string;
  jobPositionName?: string;
  level: string;
  quantity: number;
  budgetPerMonth?: number | null;
  status: string;
  description?: string;
  requirements?: string;
  clientCompanyCVTemplateName?: string;
  jobSkills?: { id: number; name: string }[];
}

export default function JobRequestDetailPage() {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [jobRequest, setJobRequest] = useState<JobRequestDetail | null>(null);
  const [jobSkills, setJobSkills] = useState<{ id: number; name: string }[]>([]);
  const [loading, setLoading] = useState(true);

  // Mappings for level and status
  const levelLabels: Record<number, string> = {
    0: "Junior",
    1: "Middle",
    2: "Senior",
    3: "Lead",
  };

  const statusLabels: Record<number, string> = {
    0: "Ch·ªù duy·ªát",
    1: "Ch∆∞a duy·ªát",
    2: "ƒê√£ ƒë√≥ng",
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);

        const [
          jobReqData,
          allProjects,
          allCompanies,
          allPositions,
          allSkills,
        ] = await Promise.all([
          jobRequestService.getById(Number(id)),
          projectService.getAll() as Promise<Project[]>,
          clientCompanyService.getAll() as Promise<ClientCompany[]>,
          jobPositionService.getAll() as Promise<JobPosition[]>,
          skillService.getAll() as Promise<Skill[]>,
        ]);

        const project = allProjects.find((p) => p.id === jobReqData.projectId);
        const clientCompany = project
          ? allCompanies.find((c) => c.id === project.clientCompanyId)
          : null;
        const position = allPositions.find(
          (pos) => pos.id === jobReqData.jobPositionId
        );

        // üß© G·ªçi danh s√°ch template hi·ªáu l·ª±c c·ªßa kh√°ch h√†ng
        let templateName = "‚Äî";
        if (clientCompany) {
          const templates = await clientCompanyCVTemplateService.listEffectiveTemplates(clientCompany.id);
          const matched = templates.find(t => t.templateId === jobReqData.clientCompanyCVTemplateId);
          templateName = matched ? matched.templateName : "‚Äî";
        }
        const jobReqWithExtra: JobRequestDetail = {
          ...jobReqData,
          projectName: project?.name || "‚Äî",
          clientCompanyName: clientCompany?.name || "‚Äî",
          jobPositionName: position?.name || "‚Äî",
          clientCompanyCVTemplateName: templateName,
        };

        const jobSkillData = await jobSkillService.getAll({
          jobRequestId: Number(id),
        }) as JobSkill[];

        const skills = jobSkillData.map((js) => {
          const found = allSkills.find((s) => s.id === js.skillsId);
          return { id: js.skillsId, name: found?.name || "Kh√¥ng x√°c ƒë·ªãnh" };
        });

        setJobRequest(jobReqWithExtra);
        console.log("Job Request chi ti·∫øt:", jobReqWithExtra);
        setJobSkills(skills);
      } catch (err) {
        console.error("‚ùå L·ªói t·∫£i chi ti·∫øt Job Request:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [id]);

  // üóëÔ∏è X√≥a y√™u c·∫ßu tuy·ªÉn d·ª•ng
  const handleDelete = async () => {
    if (!id) return;
    const confirm = window.confirm("‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a y√™u c·∫ßu tuy·ªÉn d·ª•ng n√†y?");
    if (!confirm) return;

    try {
      await jobRequestService.delete(Number(id));
      alert("‚úÖ ƒê√£ x√≥a y√™u c·∫ßu tuy·ªÉn d·ª•ng th√†nh c√¥ng!");
      navigate("/sales/job-requests");
    } catch (err) {
      console.error("‚ùå L·ªói khi x√≥a:", err);
      alert("Kh√¥ng th·ªÉ x√≥a y√™u c·∫ßu tuy·ªÉn d·ª•ng!");
    }
  };

  // ‚úèÔ∏è Chuy·ªÉn sang trang s·ª≠a
  const handleEdit = () => {
    navigate(`/sales/job-requests/edit/${id}`);
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen text-gray-500">
        ƒêang t·∫£i d·ªØ li·ªáu y√™u c·∫ßu tuy·ªÉn d·ª•ng...
      </div>
    );
  }

  if (!jobRequest) {
    return (
      <div className="flex justify-center items-center min-h-screen text-red-500">
        Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu tuy·ªÉn d·ª•ng
      </div>
    );
  }

  return (
    <div className="flex bg-gray-50 min-h-screen">
      <Sidebar items={sidebarItems} title="Sales Staff" />

      <div className="flex-1 p-8">
        {/* üè∑ Header */}
        <div className="mb-8 flex justify-between items-center">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">{jobRequest.title}</h1>
            <p className="text-neutral-600 mt-1">
              Th√¥ng tin chi ti·∫øt y√™u c·∫ßu tuy·ªÉn d·ª•ng c·ªßa kh√°ch h√†ng.
            </p>
          </div>

          <div className="flex gap-3">
            <Button
              onClick={handleEdit}
              disabled={Number(jobRequest.status) === 1 || Number(jobRequest.status) === 2}
              className={`px-6 py-2.5 rounded-xl font-medium transition-all duration-300 shadow-sm ${Number(jobRequest.status) === 1 || Number(jobRequest.status) === 2
                ? "bg-gray-300 text-gray-500 cursor-not-allowed"
                : "bg-primary-600 hover:bg-primary-700 text-white hover:shadow-md"
                }`}
            >
              S·ª≠a
            </Button>
            <Button
              onClick={handleDelete}
              disabled={Number(jobRequest.status) === 1 || Number(jobRequest.status) === 2}
              className={`px-6 py-2.5 rounded-xl font-medium transition-all duration-300 shadow-sm ${Number(jobRequest.status) === 1 || Number(jobRequest.status) === 2
                  ? "bg-gray-300 text-gray-500 cursor-not-allowed"
                  : "bg-red-600 hover:bg-red-700 text-white hover:shadow-md"
                }`}
            >
              X√≥a
            </Button>
          </div>
        </div>

        {/* üìã Th√¥ng tin chung */}
        <div className="bg-white rounded-2xl shadow-soft p-6 mb-8">
          <h2 className="text-xl font-semibold mb-4 text-primary-700">
            Th√¥ng tin chung
          </h2>
          <div className="grid grid-cols-2 gap-y-3 gap-x-8">
            <InfoItem label="C√¥ng ty kh√°ch h√†ng" value={jobRequest.clientCompanyName ?? "‚Äî"} />
            <InfoItem label="D·ª± √°n" value={jobRequest.projectName ?? "‚Äî"} />
            <InfoItem label="V·ªã tr√≠" value={jobRequest.jobPositionName ?? "‚Äî"} />
            <InfoItem label="C·∫•p ƒë·ªô" value={levelLabels[parseInt(jobRequest.level)]} />
            <InfoItem label="S·ªë l∆∞·ª£ng c·∫ßn tuy·ªÉn" value={String(jobRequest.quantity)} />
            <InfoItem
              label="Ng√¢n s√°ch (VNƒê/th√°ng)"
              value={
                jobRequest.budgetPerMonth
                  ? jobRequest.budgetPerMonth.toLocaleString("vi-VN")
                  : "‚Äî"
              }
            />
            <InfoItem label="Tr·∫°ng th√°i" value={statusLabels[parseInt(jobRequest.status)]} />
            <InfoItem
              label="CV Template kh√°ch h√†ng"
              value={jobRequest.clientCompanyCVTemplateName ?? "‚Äî"}
            />
          </div>
        </div>

        {/* üßæ M√¥ t·∫£ & Y√™u c·∫ßu & K·ªπ nƒÉng */}
        <div className="bg-white rounded-2xl shadow-soft p-6 space-y-6">
          <div>
            <h3 className="text-lg font-semibold text-primary-700 mb-2">
              M√¥ t·∫£ c√¥ng vi·ªác
            </h3>
            <p className="whitespace-pre-line text-gray-800">
              {jobRequest.description || "Ch∆∞a c√≥ m√¥ t·∫£"}
            </p>
          </div>

          <div>
            <h3 className="text-lg font-semibold text-primary-700 mb-2">
              Y√™u c·∫ßu ·ª©ng vi√™n
            </h3>
            <p className="whitespace-pre-line text-gray-800">
              {jobRequest.requirements || "Ch∆∞a c√≥ y√™u c·∫ßu c·ª• th·ªÉ"}
            </p>
          </div>

          {/* üß† K·ªπ nƒÉng y√™u c·∫ßu */}
          <div>
            <h3 className="text-lg font-semibold text-primary-700 mb-2">
              K·ªπ nƒÉng y√™u c·∫ßu
            </h3>
            {jobSkills.length > 0 ? (
              <ul className="flex flex-wrap gap-2">
                {jobSkills.map((skill) => (
                  <li
                    key={skill.id}
                    className="bg-primary-100 text-primary-800 px-3 py-1 rounded-full text-sm font-medium"
                  >
                    {skill.name}
                  </li>
                ))}
              </ul>
            ) : (
              <p className="text-gray-800">Ch∆∞a c√≥ k·ªπ nƒÉng y√™u c·∫ßu</p>
            )}
          </div>
        </div>

        <div className="mt-8">
          <Link
            to="/sales/job-requests"
            className="text-primary-600 hover:underline text-sm"
          >
            ‚Üê Quay l·∫°i danh s√°ch
          </Link>
        </div>
      </div>
    </div>
  );
}

function InfoItem({ label, value }: { label: string; value: string }) {
  return (
    <div>
      <p className="text-gray-500 text-sm">{label}</p>
      <p className="text-gray-900 font-medium">{value || "‚Äî"}</p>
    </div>
  );
}
