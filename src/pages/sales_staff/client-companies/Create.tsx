import { useState } from "react";
import { useNavigate } from "react-router-dom";
import Sidebar from "../../../components/common/Sidebar";
import { sidebarItems } from "../../../components/sales_staff/SidebarItems";
import { clientCompanyService, type ClientCompanyPayload } from "../../../services/ClientCompany";
import { Button } from "../../../components/ui/button";

export default function ClientCompanyCreatePage() {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState(false);
  const [error, setError] = useState("");
  const [form, setForm] = useState<ClientCompanyPayload>({
    name: "",
    taxCode: "",
    contactPerson: "",
    position: "",
    email: "",
    phone: "",
    address: "",
  });

  // ‚úçÔ∏è Handle form field changes
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setForm(prev => ({ ...prev, [name]: value }));
  };

  // üíæ Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError("");
    setSuccess(false);

    // ‚úÖ Validate required fields
    if (!form.name.trim()) {
      setError("T√™n c√¥ng ty kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
      setLoading(false);
      return;
    }
    if (!form.contactPerson.trim()) {
      setError("Ng∆∞·ªùi li√™n h·ªá kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
      setLoading(false);
      return;
    }
    if (!form.email.trim()) {
      setError("Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
      setLoading(false);
      return;
    }

    try {
      await clientCompanyService.create(form);
      setSuccess(true);
      setTimeout(() => navigate("/sales/clients"), 1500);
    } catch (err) {
      console.error("‚ùå L·ªói t·∫°o c√¥ng ty:", err);
      setError("Kh√¥ng th·ªÉ t·∫°o c√¥ng ty. Vui l√≤ng th·ª≠ l·∫°i.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="flex bg-gray-50 min-h-screen">
      <Sidebar items={sidebarItems} title="Sales Staff" />
      <div className="flex-1 p-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">T·∫°o C√¥ng Ty Kh√°ch H√†ng M·ªõi</h1>
          <p className="text-neutral-600 mt-1">Nh·∫≠p th√¥ng tin c√¥ng ty kh√°ch h√†ng ƒë·ªÉ t·∫°o m·ªõi</p>
        </div>

        <form onSubmit={handleSubmit} className="bg-white shadow-soft rounded-2xl p-8 max-w-3xl space-y-6">
          <InputField
            label="T√™n c√¥ng ty"
            name="name"
            value={form.name}
            onChange={handleChange}
            required
          />
          <InputField
            label="M√£ s·ªë thu·∫ø"
            name="taxCode"
            value={form.taxCode}
            onChange={handleChange}
          />
          <InputField
            label="Ng∆∞·ªùi li√™n h·ªá"
            name="contactPerson"
            value={form.contactPerson}
            onChange={handleChange}
            required
          />
          <InputField
            label="Ch·ª©c v·ª•"
            name="position"
            value={form.position}
            onChange={handleChange}
          />
          <InputField
            label="Email"
            name="email"
            type="email"
            value={form.email}
            onChange={handleChange}
            required
          />
          <InputField
            label="S·ªë ƒëi·ªán tho·∫°i"
            name="phone"
            value={form.phone}
            onChange={handleChange}
          />
          <InputField
            label="ƒê·ªãa ch·ªâ"
            name="address"
            value={form.address}
            onChange={handleChange}
          />

          {/* Error / Success Message */}
          {error && <p className="text-red-600 bg-red-50 px-4 py-2 rounded-lg">{error}</p>}
          {success && <p className="text-green-600 bg-green-50 px-4 py-2 rounded-lg">T·∫°o c√¥ng ty th√†nh c√¥ng! ƒêang chuy·ªÉn h∆∞·ªõng...</p>}

          <div className="flex justify-end">
            <Button
              type="submit"
              disabled={loading}
              className={`${loading ? "bg-primary-300 cursor-not-allowed" : "bg-primary-600 hover:bg-primary-700"} px-6 py-2 rounded-xl text-white font-medium transition-colors`}
            >
              {loading ? "ƒêang l∆∞u..." : "T·∫°o c√¥ng ty"}
            </Button>
          </div>
        </form>
      </div>
    </div>
  );
}

// ===== Component InputField nh·ªè g·ªçn =====
interface InputFieldProps extends React.InputHTMLAttributes<HTMLInputElement> {
  label: string;
}
function InputField({ label, ...props }: InputFieldProps) {
  return (
    <div>
      <label className="block text-gray-700 font-medium mb-2">{label}</label>
      <input
        {...props}
        className="w-full border border-gray-200 rounded-xl px-4 py-2 focus:ring-1 focus:ring-primary-500"
      />
    </div>
  );
}
